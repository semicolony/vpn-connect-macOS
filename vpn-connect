#!/bin/bash


[[ "$TRACE" ]] && set -x
set -u # exit on undeclared variablesk
set -o pipefail

declare -r WORKDIR="$(dirname "$(readlink -f "$0")")"
declare -r BASENAME="$(basename "$0")"
declare -r CONFFILE="$WORKDIR/connections.ini"
declare -r LIBDIR="$WORKDIR/lib"

pushd "$LIBDIR" > /dev/null || exit 1
source ./help.sh
source ./config.sh
source ./tunnel.sh
popd > /dev/null || exit 1

declare -A CONFIG
declare -a CONFIGSECTIONS
config::load CONFIGSECTIONS CONFIG "$CONFFILE" || exit 1
declare -r CONFIGSECTIONS CONFIG

declare -A AVAILABLE_OPTIONS=([b]="background")


function check_if_root_user_or_exit {
    if [[ $EUID -ne 0 ]]; then
       echo::error "This script must be run as root."
       exit 1
    fi
}

function group_arguments {
    local -n group_arguments_result=$1
    shift
    while [[ $# -gt 0 ]]; do
        #if [[ ${1:0:1} == - ]]; then
        #    if [[ $# -gt 1 && ${2:0:1} != - ]]; then
        #        group_arguments_result[$1]=$2
        #        shift
        #    else
        #        group_arguments_result[$1]=true
        #    fi
        #else
            group_arguments_result[$1]=true
        #fi
        shift
    done
}

function extract_destination {
    local -n extract_destination_arg_groups=$1
    for key in "${!extract_destination_arg_groups[@]}"; do
        [[ ${key:0:1} != - ]] && echo $key && break
    done
}

function extract_options_or_exit_with_help_screen {
    local -n extract_options_result=$1
    local -n extract_options_arg_groups=$2
    for key in "${!extract_options_arg_groups[@]}"; do
        if [[ ${key:0:1} == - && ${key:1:1} != - ]]; then
            if [[ ${AVAILABLE_OPTIONS[${key:1}]+exists} ]]; then
                extract_options_result[${AVAILABLE_OPTIONS[${key:1}]}]=${extract_options_arg_groups[$key]}
            else
                (help::show "Invalid option '$key'" && exit 1)
            fi
        elif [[ ${key:0:2} == -- ]]; then
            for k in "${!AVAILABLE_OPTIONS[@]}"; do
                [[ "${AVAILABLE_OPTIONS[$k]}" == "${key:2}" ]] && found=true && break
            done
            if $found; then
                extract_options_result[${key:2}]=${extract_options_arg_groups[$key]}
            else
                (help::show "Invalid option '$key'" && exit 1)
            fi
        fi
    done
}

function main {
    local -A destination_config
    local -A arg_groups
    local -A options
    local destination

    check_if_root_user_or_exit
    group_arguments arg_groups "$@"
    destination="$(extract_destination arg_groups)"

    ini::extract_section destination_config CONFIG "$destination"  || {
         help::show "Wrong value for DESTINATION '$destination'."
         exit 1
    }
    extract_options_or_exit_with_help_screen options arg_groups

    tunnel::open destination_config options || {
        echo::error "Cannot open tunnel."
        exit 1
    }
}

[[ $# -lt 1 ]] && help::show && exit 1

main "$@"
